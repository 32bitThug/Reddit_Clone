In Dart, the constants `const` and `final` are used to declare variables that cannot be reassigned once they are initialized.

1. **`const`:**
   - Used to declare compile-time constants.
   - The value of a `const` variable must be known at compile-time.
   - Example:
     ```dart
     const int myConstValue = 42;
     ```

2. **`final`:**
   - Used to declare a variable whose value cannot be changed after it is initialized.
   - The value of a `final` variable can be determined at runtime.
   - Example:
     ```dart
     final double myFinalValue = 3.14;
     ```

The `!` symbol, called the "bang" operator, is used for null-aware operations in Dart. It is known as the "postfix null-aware access" operator.

- Example:
  ```dart
  String? nullableString = "Hello";
  String nonNullableString = nullableString!;
  ```
  In this example, `nullableString!` asserts that `nullableString` is non-null and allows you to assign its value to `nonNullableString`. However, if `nullableString` is `null`, a runtime error will occur.




 the `?` symbol is used for null safety and is part of the null-awareness feature. It is primarily used with variables to indicate that they may be `null`. There are two primary contexts where `?` is used:

1. **Nullable Types:**
   - When declaring a variable, you can explicitly mark it as nullable using `?`:
     ```dart
     String? nullableString;
     ```
   - This means `nullableString` can either hold a `String` value or be `null`.

2. **Null-aware Access:**
   - When accessing a property or calling a method on a potentially nullable variable, you use `?.` to conditionally access it:
     ```dart
     String? maybeNull = getNullableString();
     int length = maybeNull?.length ?? 0;
     ```
   - In this example, if `maybeNull` is not `null`, the `length` property is accessed. Otherwise, the expression evaluates to `0`.
